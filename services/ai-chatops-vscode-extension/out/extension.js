(()=>{var e={317:e=>{"use strict";e.exports=require("child_process")},398:e=>{"use strict";e.exports=require("vscode")},497:(e,t,r)=>{const s=r(398),{ApiService:o}=r(713),{GitUtils:a}=r(823),n=r(928),i=r(896),c=r(570);let u="";e.exports={activate:function(e){console.log("🚀 AI ChatOps Weekly Report Extension activation started!"),c.log("AI ChatOps Weekly Report Extension is now active!");try{const t=new o,r=new a,l=[s.commands.registerCommand("aiChatOps.processWeeklyReport",async()=>{try{await async function(e,t){try{const r=await t.getUserId();if(!r)return void s.window.showErrorMessage("Unable to extract user ID from git configuration");let o;if(u){const t=await s.window.showQuickPick([{label:"Generate New Report",description:"Create a fresh weekly report"},{label:"Provide Feedback",description:"Modify the existing report"}],{placeHolder:"Choose an action"});if(!t)return;if("Provide Feedback"===t.label){const t=await s.window.showInputBox({prompt:"Enter your feedback for the weekly report",placeHolder:"e.g., Please add more details about the project timeline...",ignoreFocusOut:!0});if(!t)return;s.window.showInformationMessage("Processing feedback..."),o=await e.processWeeklyReport(r,t,u)}else s.window.showInformationMessage("Generating new weekly report..."),u="",o=await e.processWeeklyReport(r)}else s.window.showInformationMessage("Generating weekly report..."),o=await e.processWeeklyReport(r);if(c.log("API Response:",JSON.stringify(o,null,2)),o.success&&o.data){let e="";if("string"==typeof o.data)e=o.data;else if(o.data.message)e=o.data.message;else if(o.data.content)e=o.data.content;else{if(!o.data.report)return c.error("Unexpected response data structure:",o.data),void s.window.showErrorMessage("보고서 데이터 형식이 올바르지 않습니다.");e=o.data.report}u=e;try{await async function(){if(u)try{const e=s.workspace.workspaceFolders?.[0];if(!e)return void s.window.showErrorMessage("No workspace folder found");const t=n.join(e.uri.fsPath,"ai_chatops","weekly_reports");i.existsSync(t)||i.mkdirSync(t,{recursive:!0});const r=new Date,o=`weekly_report_${r.toISOString().slice(2,10).replace(/-/g,"")}_${r.toISOString().slice(11,16).replace(/:/g,"")}.md`,a=n.join(t,o);i.writeFileSync(a,u,"utf8");const c=await s.workspace.openTextDocument(a);await s.window.showTextDocument(c,{preview:!1,viewColumn:s.ViewColumn.One}),s.window.showInformationMessage(`Report saved as: ${o}`)}catch(e){s.window.showErrorMessage(`Failed to save report: ${e.message}`)}else s.window.showWarningMessage("No report available to save. Please generate a report first.")}(),s.window.showInformationMessage("주간 보고서가 성공적으로 처리되고 저장되었습니다!")}catch(e){s.window.showErrorMessage(`보고서는 생성되었지만 저장에 실패했습니다: ${e.message}`)}}else{const e=o.errorMessage||o.message||"Unknown error";c.error("Report processing failed:",e),s.window.showErrorMessage(`보고서 처리 실패: ${e}`)}}catch(e){s.window.showErrorMessage(`Error processing weekly report: ${e.message}`)}}(t,r)}catch(e){s.window.showErrorMessage(`Failed to process weekly report: ${e.message}`)}}),s.commands.registerCommand("aiChatOps.refresh",()=>{console.log("🔄 Refresh command executed"),s.window.showInformationMessage("Weekly Report extension refreshed")})];l.forEach(t=>{e.subscriptions.push(t)}),c.log("Weekly Report commands registered successfully"),console.log("🎉 Extension activation completed successfully!")}catch(e){c.error("Error activating extension:",e),s.window.showErrorMessage(`Failed to activate AI ChatOps Weekly Report Extension: ${e.message}`)}},deactivate:function(){c.log("AI ChatOps Weekly Report Extension deactivated")}}},570:(e,t,r)=>{const s=r(398);e.exports=new class{constructor(){this.outputChannel=s.window.createOutputChannel("SWDP ChatOps")}log(e){this.outputChannel.appendLine(`[INFO] ${e}`)}error(e,t){this.outputChannel.appendLine(`[ERROR] ${e}`),t&&this.outputChannel.appendLine(t.stack||t.toString())}show(){this.outputChannel.show()}}},611:e=>{"use strict";e.exports=require("http")},692:e=>{"use strict";e.exports=require("https")},713:(e,t,r)=>{const s=r(692),o=r(611),a=r(570);e.exports={ApiService:class{constructor(){this.baseURL="http://localhost:443",this.timeout=3e4,a.log("ApiService initialized with baseURL:",this.baseURL)}async httpRequest(e,t={}){return new Promise((r,n)=>{const i=new URL(e),c="https:"===i.protocol,u=c?s:o,l={hostname:i.hostname,port:i.port||(c?443:80),path:i.pathname+i.search,method:t.method||"GET",headers:{"Content-Type":"application/json","User-Agent":"SWDP-ChatOps-Extension/1.0.0",...t.headers},timeout:this.timeout};a.log("Starting HTTP request to:",e),a.log("Request options:",JSON.stringify(l,null,2));const d=u.request(l,e=>{a.log(`Response received - Status: ${e.statusCode}`);let t="";e.on("data",e=>{t+=e,a.log("Data chunk received, length:",e.length)}),e.on("end",()=>{try{a.log(`Raw response data: ${t}`);const s={status:e.statusCode,statusText:e.statusMessage,data:t?JSON.parse(t):null};a.log("Parsed response:",s),r(s)}catch(s){a.error("JSON parse error:",s),r({status:e.statusCode,statusText:e.statusMessage,data:t,parseError:s.message})}})});if(d.on("error",e=>{a.error("HTTP request error:",e),n(e)}),d.on("timeout",()=>{a.error("HTTP request timeout after",this.timeout,"ms"),d.destroy(),n(new Error("Request timeout"))}),d.on("connect",()=>{a.log("HTTP connection established")}),t.data){const e=JSON.stringify(t.data);a.log("Request body:",e),d.write(e)}a.log("Sending HTTP request..."),d.end()})}async processWeeklyReport(e,t=null,r=null){try{let s;s=t&&r?`<<DOCUMENT_START>>\n${r}\n<<DOCUMENT_END>>\n\nREVISION_REQUEST: ${t}\n\nPlease revise the above document based on the revision request.`:"Generate a comprehensive weekly report based on the data from the last 8 days starting from today.";const o={userId:e,userQuery:s};a.log("API Request URL:",`${this.baseURL}/message-async/devportal/api/v1/extension/message-async`),a.log("API Request Data:",o);const n=await this.httpRequest(`${this.baseURL}/devportal/api/v1/extension/message-async`,{method:"POST",data:o}),i=t?"feedback processing":"report generation";return a.log(`API Response Status: ${n.status}`),a.log("API Response Data:",n.data),200===n.status?{success:!0,data:n.data,message:`Weekly report ${i} completed successfully`}:{success:!1,errorMessage:`HTTP ${n.status}: ${n.statusText}`,data:n.data}}catch(e){return this.handleError("processWeeklyReport",e)}}async checkAuth(e){try{const t=await this.httpRequest(`${this.baseURL}/devportal/rest/api/auth/check`,{method:"GET",headers:{Authorization:`Bearer ${e}`}});return{success:200===t.status&&!0===t.data?.authenticated,data:t.data,message:"Token verification successful"}}catch(e){return this.handleError("checkAuth",e)}}handleError(e,t){a.error(`API Error in ${e}:`,t);let r="Unknown error occurred",s={};return t.status?(r=this.getStatusMessage(t.status),s={status:t.status,statusText:t.statusText,data:t.data}):t.message?(r=t.message,s={message:t.message}):(r="Request failed",s={error:t.toString()}),{success:!1,errorMessage:r,errorDetails:s,operation:e}}getStatusMessage(e){return{400:"Invalid request format",401:"Authentication required",403:"Access denied",404:"Service not found",408:"Request timeout",429:"Too many requests",500:"Internal server error",502:"Gateway error",503:"Service unavailable",504:"Gateway timeout"}[e]||`HTTP error ${e}`}}}},823:(e,t,r)=>{const s=r(398),{exec:o}=r(317),a=r(928),n=r(896),i=r(570);e.exports={GitUtils:class{constructor(){this.workspaceRoot=null,this.initializeWorkspace()}initializeWorkspace(){const e=s.workspace.workspaceFolders;e&&e.length>0&&(this.workspaceRoot=e[0].uri.fsPath)}async getUserId(){try{if(!this.workspaceRoot)throw new Error("No workspace folder found");const e=await this.getGitEmail();if(!e)throw new Error("No git email found");const t=e.split("@")[0];if(!t)throw new Error("Invalid email format");return i.log(`Extracted userId: ${t} from email: ${e}`),t}catch(e){throw i.error("Error extracting userId from git:",e),e}}async getGitEmail(){try{const e=await this.executeGitCommand("config user.email");if(e)return e.trim();const t=await this.executeGitCommand("config --global user.email");if(t)return t.trim();const r=await this.readGitConfigEmail();if(r)return r.trim();throw new Error("No git email configuration found")}catch(e){throw i.error("Error getting git email:",e),e}}async executeGitCommand(e){return new Promise((t,r)=>{const s=`git ${e}`,a={cwd:this.workspaceRoot,timeout:5e3};o(s,a,(e,r,s)=>{if(e)return i.error(`Git command error: ${e}`),void t(null);s&&s.trim()&&i.log(`Git command warning: ${s}`),t(r?r.toString():null)})})}async readGitConfigEmail(){try{if(!this.workspaceRoot)return null;const e=a.join(this.workspaceRoot,".git","config");if(!n.existsSync(e))return null;const t=n.readFileSync(e,"utf8").split("\n");let r=!1;for(const e of t){const t=e.trim();if("[user]"!==t){if(t.startsWith("[")&&"[user]"!==t)r=!1;else if(r&&t.startsWith("email = "))return t.substring(8)}else r=!0}return null}catch(e){return i.error("Error reading git config file:",e),null}}async getUserName(){try{const e=await this.executeGitCommand("config user.name");if(e)return e.trim();const t=await this.executeGitCommand("config --global user.name");return t?t.trim():"Unknown User"}catch(e){return i.error("Error getting git user name:",e),"Unknown User"}}async getCurrentBranch(){try{const e=await this.executeGitCommand("branch --show-current");return e?e.trim():"main"}catch(e){return i.error("Error getting current branch:",e),"main"}}async isGitRepository(){try{const e=await this.executeGitCommand("rev-parse --is-inside-work-tree");return e&&"true"===e.trim()}catch(e){return!1}}async getRepositoryInfo(){try{if(!await this.isGitRepository())return null;const e=await this.getUserId(),t=await this.getUserName();return{userId:e,userName:t,branch:await this.getCurrentBranch(),email:await this.getGitEmail(),workspaceRoot:this.workspaceRoot}}catch(e){return i.error("Error getting repository info:",e),null}}}}},896:e=>{"use strict";e.exports=require("fs")},928:e=>{"use strict";e.exports=require("path")}},t={},r=function r(s){var o=t[s];if(void 0!==o)return o.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,r),a.exports}(497);module.exports=r})();
//# sourceMappingURL=extension.js.map